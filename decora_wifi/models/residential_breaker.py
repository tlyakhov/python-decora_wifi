# Leviton Cloud Services API model ResidentialBreaker.
# Auto-generated by api_scraper.py.
#
# Copyright 2017 Tim Lyakhovetskiy <tlyakhov@gmail.com>
#
# This code is released under the terms of the MIT license. See the LICENSE
# file for more details.
from decora_wifi.base_model import BaseModel


class ResidentialBreaker(BaseModel):
    def __init__(self, session, model_id=None, panel_id=None):
        super(ResidentialBreaker, self).__init__(session, model_id, panel_id)

    @classmethod
    def count(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers/count"
        return session.call_api(api, attribs, 'get')

    @classmethod
    def create(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers"
        return session.call_api(api, attribs, 'post')

    @classmethod
    def create_many(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers"
        return session.call_api(api, attribs, 'post')

    def delete_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers/{0}".format(self._id)
        return self._session.call_api(api, attribs, 'delete')

    def exists(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers/{0}/exists".format(self._id)
        return self._session.call_api(api, attribs, 'get')

    @classmethod
    def find(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers"
        items = session.call_api(api, attribs, 'get')

        result = []
        if items is not None:
            for data in items:
                model = ResidentialBreaker(session, data['id'])
                model.data = data
                result.append(model)
        return result

    def find_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        self.data.update(data)
        return self

    @classmethod
    def find_one(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers/findOne"
        return session.call_api(api, attribs, 'get')

    def refresh(self):
        api = "/ResidentialBreakers/{0}".format(self._id)
        result = self._session.call_api(api, {}, 'get')
        if result is not None:
            self.data.update(result)
        return self

    def get_energy_consumption_for_day(self, day, timezone, attribs=None):
        if attribs is None:
            attribs = {}
            attribs["residentialBreakerPanelId"] = str(self._panel_id)
            attribs["id"] = str(self._id)
            attribs["theDay"] = day
            attribs["localTimezone"] = timezone
        api = "/ResidentialBreakers/energyConsumptionForDay"
        items = self._session.call_api(api, attribs, 'get')

        result = []
        if items is not None:
            for hour in items:
                result.append(hour)
                #{'residentialBreakerPanelId': 'LDATA-ABCDE-12345-FGHIJ', 'residentialBreakerId': '4C4512345678', 'position': 6, 'theHour': 21, 'energyConsumption': 11.62}
        return result

    def get_energy_consumption_for_week(self, week, timezone, attribs=None):
        if attribs is None:
            attribs = {}
            attribs["residentialBreakerPanelId"] = str(self._panel_id)
            attribs["id"] = str(self._id)
            attribs["theWeek"] = week
            attribs["localTimezone"] = timezone
        api = "/ResidentialBreakers/energyConsumptionForWeek"
        items = self._session.call_api(api, attribs, 'get')

        result = []
        if items is not None:
            for day in items:
                result.append(day)
                #{'residentialBreakerPanelId': 'LDATA-ABCDE-12345-FGHIJ', 'residentialBreakerId': '4C4512345678', 'position': 10, 'theDay': '2021-08-02T00:00:00.000Z', 'energyConsumption': 13.33}
        return result

    def get_energy_consumption_for_month(self, month, timezone, attribs=None):
        if attribs is None:
            attribs = {}
            attribs["residentialBreakerPanelId"] = str(self._panel_id)
            attribs["id"] = str(self._id)
            attribs["theMonth"] = month
            attribs["localTimezone"] = timezone
        api = "/ResidentialBreakers/energyConsumptionForMonth"
        items = self._session.call_api(api, attribs, 'get')

        result = []
        if items is not None:
            for week in items:
                result.append(week)
                #{'residentialBreakerPanelId': 'LDATA-ABCDE-12345-FGHIJ', 'residentialBreakerId': '4C4512345678', 'position': 6, 'theDay': '2021-08-13T00:00:00.000Z', 'energyConsumption': 47.07}
        return result

    def get_energy_consumption_for_year(self, year, timezone, attribs=None):
        if attribs is None:
            attribs = {}
            attribs["residentialBreakerPanelId"] = str(self._panel_id)
            attribs["id"] = str(self._id)
            attribs["theYear"] = year
            attribs["localTimezone"] = timezone
        api = "/ResidentialBreakers/energyConsumptionForYear"
        items = self._session.call_api(api, attribs, 'get')

        result = []
        if items is not None:
            for month in items:
                result.append(month)
                #{'residentialBreakerPanelId': 'LDATA-ABCDE-12345-FGHIJ', 'residentialBreakerId': '4C4512345678', 'position': 10, 'theMonth': 1, 'theYear': 2021, 'energyConsumption': 401.24}
        return result

    def get_residential_breaker_panel(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers/{0}/residentialBreakerPanel".format(self._id)
        data = self._session.call_api(api, attribs, 'get')

        from .residential_breaker_panel import ResidentialBreakerPanel
        model = ResidentialBreakerPanel(self._session, data['id'])
        model.data = data
        return model

    def replace_by_id(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers/{0}/replace".format(self._id)
        return self._session.call_api(api, attribs, 'post')

    @classmethod
    def replace_or_create(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers/replaceOrCreate"
        return session.call_api(api, attribs, 'post')

    def update_attributes(self, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers/{0}".format(self._id)
        data = self._session.call_api(api, attribs, 'put')

        self.data.update(attribs)
        return self

    @classmethod
    def upsert(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers"
        data = session.call_api(api, attribs, 'put')

        model = ResidentialBreaker(session, data['id'])
        model.data = data
        return model

    @classmethod
    def upsert_with_where(cls, session, attribs=None):
        if attribs is None:
            attribs = {}
        api = "/ResidentialBreakers/upsertWithWhere"
        return session.call_api(api, attribs, 'post')

